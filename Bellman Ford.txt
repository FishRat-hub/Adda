//Bellman Ford
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []
    def add_edge(self, u, v, w):
        self.edges.append([u, v, w])
    def bellman_ford(self, src):
        dist = [float("Inf")] * self.V
        dist[src] = 0
        for _ in range(self.V - 1):
            for u, v, w in self.edges:
                if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                    dist[v] = dist[u] + w
        for u, v, w in self.edges:
            if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                print("Graph contains negative-weight cycle")
                return None
        return dist
def display_menu():
    print("\nBellman-Ford Algorithm")
    print("1. Find shortest path from source vertex")
    print("2. Exit")
def predefined_graph():
    graph = Graph(5)
    graph.add_edge(0, 1, -1)
    graph.add_edge(0, 2, 4)
    graph.add_edge(1, 2, 3)
    graph.add_edge(1, 3, 2)
    graph.add_edge(1, 4, 2)
    graph.add_edge(3, 2, 5)
    graph.add_edge(3, 1, 1)
    graph.add_edge(4, 3, -3)
    return graph
def main():
    graph = predefined_graph()
    while True:
        display_menu()
        choice = input("\nEnter your choice: ")
        if choice == '1':
            src = int(input("Enter the source vertex: "))
            if 0 <= src < graph.V:
                dist = graph.bellman_ford(src)
                if dist:
                    print(f"Shortest distances from vertex {src}:")
                    for i in range(graph.V):
                        print(f"Vertex {i}: {dist[i]}")
            else:
                print(f"Invalid vertex! Please enter a number between 0 and {graph.V - 1}.")
        elif choice == '2':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice! Please try again.")
if __name__ == "__main__":
    main()

---Explanation of Output
Vertex 0: Distance = 0 (it’s the source itself).
Vertex 1: Distance = -1 (shortest path: 
0→1 ..0→1).
Vertex 2: Distance = 2 (shortest path: 
0→1→2 ..0→1→2).
Vertex 3: Distance = -2 (shortest path: 
0→1→4→3 ..0→1→4→3).
Vertex 4: Distance = 1 (shortest path: 
0→1→4 ..0→1→4).
O(VXE)-Time