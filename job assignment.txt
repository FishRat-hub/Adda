import heapq
import copy

N = 4  # Number of workers and jobs (assuming same number of workers and jobs)

# Node class to represent each state in the search tree
class Node:
    def __init__(self, x, y, assigned, parent):
        self.parent = parent
        self.pathCost = 0
        self.cost = 0
        self.workerID = x  # Worker ID
        self.jobID = y     # Job ID
        self.assigned = copy.deepcopy(assigned)  # List of assigned jobs
        if y != -1:
            self.assigned[y] = True  # Mark job as assigned

# Custom heap class for priority queue (min-heap)
class CustomHeap:
    def __init__(self):
        self.heap = []
    
    def push(self, node):
        heapq.heappush(self.heap, (node.cost, node))  # Push node to heap with cost as priority
    
    def pop(self):
        if self.heap:
            _, node = heapq.heappop(self.heap)  # Pop node with minimum cost
            return node
        return None

# Function to create a new node
def new_node(x, y, assigned, parent):
    return Node(x, y, assigned, parent)

# Function to calculate the lower bound for a node
def calculate_cost(cost_matrix, x, y, assigned):
    cost = 0
    available = [True] * N  # To track unassigned jobs
    for i in range(x + 1, N):
        min_val, min_index = float('inf'), -1
        for j in range(N):
            if not assigned[j] and available[j] and cost_matrix[i][j] < min_val:
                min_index = j
                min_val = cost_matrix[i][j]
        cost += min_val
        available[min_index] = False
    return cost

# Function to print the assignments by backtracking through the parent nodes
def print_assignments(min_node):
    if min_node.parent is None:
        return
    print_assignments(min_node.parent)
    print(f"Assign Worker {chr(min_node.workerID + ord('A'))} to Job {min_node.jobID + 1}")

# Main function to find the minimum cost assignment
def find_min_cost(cost_matrix):
    pq = CustomHeap()  # Priority queue for Branch and Bound
    assigned = [False] * N  # No jobs assigned initially
    root = new_node(-1, -1, assigned, None)  # Root node with no worker assigned
    root.pathCost = root.cost = 0
    root.workerID = -1
    pq.push(root)  # Push root node to heap
    
    maxProfit = 0  # Variable to keep track of maximum profit (minimum cost in our case)
    
    while True:
        min_node = pq.pop()
        i = min_node.workerID + 1  # Move to the next worker
        
        if i == N:  # If all workers are assigned
            print_assignments(min_node)  # Print the assignments
            return min_node.cost  # Return the total cost
        
        # Generate child nodes for assigning the current worker to different jobs
        for j in range(N):
            if not min_node.assigned[j]:  # If job is not assigned yet
                child = new_node(i, j, min_node.assigned, min_node)
                child.pathCost = min_node.pathCost + cost_matrix[i][j]
                child.cost = child.pathCost + calculate_cost(cost_matrix, i, j, child.assigned)  # Compute cost with lower bound
                pq.push(child)  # Push child node to heap

# Driver code
if __name__ == "__main__":
    # Cost matrix representing the cost of assigning workers (A, B, C, D) to jobs (1, 2, 3, 4)
    cost_matrix = [
        [9, 2, 7, 8],
        [6, 4, 3, 7],
        [5, 8, 1, 8],
        [7, 6, 9, 4]
    ]
    
    optimal_cost = find_min_cost(cost_matrix)
    if optimal_cost is not None:
        print("\nOptimal Cost is {}".format(optimal_cost))  # Print the optimal cost
    else:
        print("\nNo optimal solution found.")
O(N^2)-Greedy
O(N!Ã—N)-Backtracking