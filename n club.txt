import heapq
import copy

N = 4  # Number of students (and clubs)

class Node:
    def __init__(self, student, club, assigned, parent):
        self.parent = parent
        self.path_cost = 0
        self.cost = 0
        self.student = student
        self.club = club
        self.assigned = copy.deepcopy(assigned)
        if club != -1:
            self.assigned[club] = True

class CustomHeap:
    def __init__(self):
        self.heap = []
        
    def push(self, node):
        heapq.heappush(self.heap, (node.cost, node))
        
    def pop(self):
        if self.heap:
            _, node = heapq.heappop(self.heap)
            return node
        return None

def new_node(student, club, assigned, parent):
    return Node(student, club, assigned, parent)

def calculate_cost(cost_matrix, student, club, assigned):
    cost = 0
    available = [True] * N
    for i in range(student + 1, N):
        min_val = float('inf')
        for j in range(N):
            if not assigned[j] and available[j] and cost_matrix[i][j] < min_val:
                min_val = cost_matrix[i][j]
                min_index = j
        cost += min_val
        available[min_index] = False
    return cost

def print_assignments(min_node):
    if min_node.parent is None:
        return

    print_assignments(min_node.parent)
    print("Assign Student {} to Club {}".format(min_node.student, min_node.club))

def find_min_cost(cost_matrix):
    pq = CustomHeap()
    assigned = [False] * N
    root = new_node(-1, -1, assigned, None)
    root.path_cost = root.cost = 0
    root.student = -1
    pq.push(root)
    
    while True:
        min_node = pq.pop()
        student = min_node.student + 1
        
        if student == N:
            print_assignments(min_node)
            return min_node.cost
        
        for club in range(N):
            if not min_node.assigned[club]:
                child = new_node(student, club, min_node.assigned, min_node)
                child.path_cost = min_node.path_cost + cost_matrix[student][club]
                child.cost = child.path_cost + calculate_cost(cost_matrix, student, club, child.assigned)
                pq.push(child)

if __name__ == "__main__":
    cost_matrix = [
        [9, 2, 7, 8],   # Costs for assigning student 0 to clubs 0, 1, 2, 3
        [6, 4, 3, 7],   # Costs for assigning student 1 to clubs 0, 1, 2, 3
        [5, 8, 1, 8],   # Costs for assigning student 2 to clubs 0, 1, 2, 3
        [7, 6, 9, 4]    # Costs for assigning student 3 to clubs 0, 1, 2, 3
    ]
    
    optimal_cost = find_min_cost(cost_matrix)
    print("\nOptimal Cost is {}".format(optimal_cost))
O(logN)	